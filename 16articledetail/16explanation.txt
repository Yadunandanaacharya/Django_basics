Below Important steps mentioned refer it.

Constructing article detail page: 
Now we can do like when you will enter slug detail in browser url it will
print respective slug in display    

These above things are handled by views.py for article_detail, we'll receive a slug
from the url
http://127.0.0.1:8000/articles/Hello-world/

then we are sending back slug to the browser

Now I'll do like find based on article respective slug from databse.

def article_detail(request,slug):
    # return HttpResponse(slug)
    artis = Article.objects.get(slug = slug)
    return render(request,'articles/article_detail.html',{'article': artis})

We will alter this function in views like this 
article = Article.objects.get(slug = slug)
slug =slug which we will get from article_detail function
so this function will lokk for article in the databse
now we can render a template and send that data to the template

returnining request and  article_detail
('articles/article_detail.html')

third parameter is data we want to send

by taking artis and sending it to article_detail.html so that we can output in
browser

create article_detail.html inside article

In article_detail.html we'll use different div tags for styling purposes

/////////////////////////////////////////////////////////////////////////////////////////
IMPORTANT: mAIN MISTAKES I have done. 
article_detail and article_list under template tag of articles should extend
from base_layout.html which I've not done, I got confused here I have mixed
base_layout content in article_list.html

Start naming variables meaningful: or else you'll get confused.



For article_detail and article_list you need to name differntly and their use cases
are different.

After studying all variables and tags templates in detail understood some steps
which are very very important.

Aim: In browser when you click on ""Image like symbol above"" ""Welcome to our Article list""
that page should get refresh.

Example: Assume you have clicked "First World War" so one separate web page will open
with article details in it , so now you want to visit home page where you were
earlier so you need to click on Image ""Article Home List"" symbol so that you will visit main page
where list of all articles will be there.

Step1: 
def article_list(request):
    article_for_list = Article.objects.all().order_by('date')
    return render(request, 'articles/article_list.html',{'article_for_listsare':article_for_list})
def article_detail(request,slug):
    # return HttpResponse(slug)
    article_for_detail = Article.objects.get(slug = slug)
    return render(request,'articles/article_detail.html',{'article_details': article_for_detail}) 

Naming of variables are very very important.
"article_for_listsare" this name you need to register in urls.py with
app_name = 'article_for_listsare'

Or else you will get error:
'article_for_listsare' is not a registered namespace, since spelling mistake is there.
when I type like this
app_name = 'article_for_ltsare'


Step2: You are gonna use this "article_for_listsare" in article_list.html file.
Inside for loop.

  {% for iarts in article_for_listsare %}
            <div class="iarts">
                <h2><a href="{% url 'article_for_listsare:detail' slug=iarts.slug %}">{{iarts.title}}</a></h2>
                <p>{{ iarts.snippet }}</p>
                <p>{{ iarts.date }}</p>
            </div>
In for loop, in url link. Even if you do spelling mistake while typing 
url 'article_for_listsare:detail' here you will get error. I have used different variables
to understand properly.

Step3: "article_for_listsare" using this in base_layout.html 
In h1 tah with url: 
<h1><a href="{% url 'article_for_listsare:list' %}"><img src="{% static 'logo.png'"/></a></h1>
    

Step4: Using "article_details" property from article_detail function in
article_detail.html file.
  <h2>{{ article_details.title }}</h2>
        <p>{{ article_details.body }}</p>
        <p>{{ article_details.date }}</p>
Important here also you need to use only property not "article_for_detail" variable
If you use that body of article won't be displayed.